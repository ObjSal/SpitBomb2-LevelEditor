(function () {
	'use strict';

	function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}class Block{constructor(a,b,c,d){this.x=a,this.y=b,this.width=Block.size,this.height=Block.size,this.image=c,this.type=d;}id(){return this._id||(this._id=`${this.type}${new URL(this.image.src).pathname}`),this._id}hitTest(a,b,c,d){if(c&&d){let e=(a>this.x||a+c>this.x)&&(a<this.x+this.width||a+c<this.x+this.width),f=(b>this.y||b+d>this.y)&&(b<this.y+this.height||b+d<this.y+this.height);return e&&f}return a>=this.x&&a<=this.x+this.width&&b>=this.y&&b<=this.y+this.height}move(a,b){this.x=a,this.y=b;}copy(){let a=Object.create(this);return Object.assign(a,this)}draw(a){a.drawImage(this.image,this.x,this.y,this.width,this.height);}}_defineProperty(Block,"size",50);_defineProperty(Block,"Type",{Soft:"soft",Hard:"hard",Color:"color"});class ColorBlock extends Block{constructor(a,b,c){super(a,b),this.width=ColorBlock.size,this.height=ColorBlock.size,this.type=Block.Type.Color,this.fillStyle=c;}id(){return this._id||(this._id=`${this.type}${this.fillStyle}`),this._id}draw(a){a.save(),a.fillStyle=this.fillStyle,a.fillRect(this.x,this.y,this.width,this.height),a.restore();}}_defineProperty(ColorBlock,"size",25);

	const MapState={None:"none",Paint:"paint",Move:"move",Erase:"erase",EyeDropper:"EyeDropper"};class Map{constructor(a,b,c,d){this.x=a,this.y=b,this.width=c,this.height=d,this.borderStrokeStyle="#888888",this.borderLineWidth=2,this.backgroundFillColor="#ffffff",this.gridStrokeStyle="#888888",this.gridLineWidth=1,this.blocks=[],this.activeBlock=null,this.cellSize=25,this.state=MapState.None,this.mouseDown=!1;}copy(){let a=Object.create(this);return Object.assign(a,this),a.blocks=a.blocks.slice(),a}setState(a,b){this.activeBlock=a===MapState.Paint?b:null,this.completion=a===MapState.EyeDropper?b:null,this.state=a;}openContent(a,b,c){const d=b.map;c.width=d.width,c.height=d.height,c.blocks=[],c.draw(a),d.blocks.forEach(function(b){let d;if(b.type===Block.Type.Color)d=new ColorBlock(b.x,b.y,b.color),a.save(),a.translate(c.x,c.y),d.draw(a),a.restore();else {let e=new Image;d=new Block(b.x,b.y,e,b.type),e.onload=function(){a.save(),a.translate(c.x,c.y),d.draw(a),a.restore();},e.src=b.img;}c.blocks.push(d);});}open(a){var b=this;let c=document.createElement("input");c.type="file",c.onchange=function(c){const d=c.target.files;if(!d||0===d.length)return;let f=b,g=new FileReader;g.onload=function(b){let c=b.target.result;const d=JSON.parse(c);f.openContent(a,d,f);},g.readAsText(d[0]);},c.click();}download(b,c,d){d&&"."!==d.charAt(0)&&(d=`.${d}`);let e=prompt("Save as",`${c}${d}`);if(null!=e){""===e&&(e=`${c}${d}`),e.endsWith(d)||(e=`${e}${d}`);let f=document.createElement("a");f.href=b,f.download=e,f.click();}}save(){let a=[];this.blocks.forEach(function(b){let c={type:b.type,x:b.x,y:b.y,width:b.width,height:b.height};b.type===Block.Type.Color?c.color=b.fillStyle:c.img=new URL(b.image.src).pathname,a.push(c);});let b={version:"0.1",map:{width:this.width,height:this.height,blocks:a}},c="data:application/octet-stream,"+encodeURIComponent(JSON.stringify(b));this.download(c,"BlockBreakerMap","json");}saveImage(){let a=this.width,b=this.height,c=0,d=0;for(const e of this.blocks)e.x<a&&(a=e.x),e.y<b&&(b=e.y),e.x+e.width>c&&(c=e.x+e.width),e.y+e.height>d&&(d=e.y+e.height);let e=c-a,f=d-b,g=document.createElement("canvas");g.width=e,g.height=f;let h=g.getContext("2d");h.save(),h.translate(-a,-b),this.drawBlocks(h),h.restore();let i=g.toDataURL("image/png");this.download(i,"BlockBreakerImage","png");}outOfBounds(a,b){return a-=this.x,b-=this.y,!(0<=a&&a<=this.width&&0<=b&&b<=this.height)}updateMouseCursor(a,b,c){if(this.outOfBounds(b,c))return !1;switch(this.state){case MapState.Paint:return a.style.cursor="default",!0;case MapState.Move:return a.style.cursor="move",!0;case MapState.EyeDropper:case MapState.Erase:return a.style.cursor="crosshair",!0;}return !1}cellForXY(a,b){let c=Math.floor(a/this.cellSize)*this.cellSize,d=Math.floor(b/this.cellSize)*this.cellSize;return c=Math.min(c,this.width-this.activeBlock.width),d=Math.min(d,this.height-this.activeBlock.height),{x:c,y:d}}onClick(a,b,c){if(!this.outOfBounds(b,c))switch(this.state){case MapState.Paint:{this.addBlock(a,b,c);break}case MapState.Move:{this.moveBlock(a,b,c);break}case MapState.Erase:{this.eraseBlock(a,b,c);break}case MapState.EyeDropper:{this.eyeDropper(a,b,c);break}}}onMouseDown(a,b,c){this.outOfBounds(b,c)||(this.mouseDown=!0);}onMouseUp(){this.mouseDown=!1;}drawActiveBlock(a,b,c){if(this.activeBlock){if(this.draw(a),a.save(),a.translate(this.x,this.y),b-=this.x,c-=this.y,0<=b&&b<=this.width&&0<=c&&c<=this.height){const d=this.cellForXY(b,c);this.activeBlock.move(d.x,d.y),this.activeBlock.draw(a);}a.restore();}}addBlock(a,b,c){if(this.outOfBounds(b,c))return;if(!this.activeBlock)return;b-=this.x,c-=this.y;const d=this.cellForXY(b,c);let e=!1;for(let f,g=0;g<this.blocks.length;g++)if(f=this.blocks[g],f.x===d.x&&f.y===d.y){f.id()!==this.activeBlock.id()&&this.blocks.splice(g,1,this.activeBlock.copy()),e=!0;break}e||this.blocks.push(this.activeBlock.copy());}eraseBlock(a,b,c){b-=this.x,c-=this.y;for(let d,e=0;e<this.blocks.length;e++)if(d=this.blocks[e],d.hitTest(b,c)){this.blocks.splice(e,1),this.draw(a);break}}eyeDropper(a,b,c){b-=this.x,c-=this.y;for(let d,e=0;e<this.blocks.length;e++)if(d=this.blocks[e],d.hitTest(b,c)){this.completion&&d.type===Block.Type.Color&&this.completion(d.fillStyle),this.setState(MapState.Paint,d.copy());break}}moveBlock(a,b,c){if(this.activeBlock)this.addBlock(a,b,c),this.activeBlock=null;else {b-=this.x,c-=this.y;for(let a,d=0;d<this.blocks.length;d++)if(a=this.blocks[d],a.hitTest(b,c)){this.activeBlock=this.blocks.splice(d,1)[0];break}}}onMouseMove(a,b,c){switch(this.state){case MapState.Paint:{this.drawActiveBlock(a,b,c),this.mouseDown&&this.addBlock(a,b,c);break}case MapState.Move:{this.drawActiveBlock(a,b,c);break}case MapState.Erase:{this.mouseDown&&this.eraseBlock(a,b,c);break}}}drawGrid(a){a.beginPath(),a.strokeStyle=this.gridStrokeStyle,a.lineWidth=this.gridLineWidth;for(let b=0;b<this.width;b+=this.cellSize)a.moveTo(b,0),a.lineTo(b,this.height);for(let b=0;b<this.height;b+=this.cellSize)a.moveTo(0,b),a.lineTo(this.width,b);a.stroke();}drawGuideLines(a){a.beginPath(),a.lineWidth=2,a.moveTo(this.width/2,0),a.lineTo(this.width/2,this.height),a.moveTo(0,this.height/2),a.lineTo(this.width,this.height/2);let b=this.width-this.height;0<b?(a.moveTo(b/2,0),a.lineTo(b/2,this.height),a.moveTo(this.width-b/2,0),a.lineTo(this.width-b/2,this.height)):0>b;let c=Math.min(this.height,this.width);a.moveTo(b/2+c/4,0),a.lineTo(b/2+c/4,this.height),a.moveTo(0,c/4),a.lineTo(this.width,c/4),a.stroke();}drawBlocks(a){this.blocks.forEach(function(b){b.draw(a);});}draw(a){a.save(),a.translate(this.x,this.y),a.fillStyle=this.backgroundFillColor,a.strokeStyle=this.borderStrokeStyle,a.lineWidth=this.borderLineWidth,a.beginPath(),a.rect(0,0,this.width,this.height),a.fill(),a.stroke(),this.drawGrid(a),this.drawGuideLines(a),this.drawBlocks(a),a.restore();}}

	class Button{constructor(a,b,c,d,e,f,g){this.x=a,this.y=b,this.width=c,this.height=d,this.fillStyle=e,this.strokeStyle=f,this.image=g;}hitTest(a,b,c,d){if(c&&d){let e=(a>this.x||a+c>this.x)&&(a<this.x+this.width||a+c<this.x+this.width),f=(b>this.y||b+d>this.y)&&(b<this.y+this.height||b+d<this.y+this.height);return e&&f}return a>=this.x&&a<=this.x+this.width&&b>=this.y&&b<=this.y+this.height}onClick(a,b,c){return !!this.hitTest(b,c)&&(this.onClickAction(),!0)}draw(a){a.save(),this.fillStyle&&(a.fillStyle=this.fillStyle,a.fillRect(this.x,this.y,this.width,this.height)),this.image&&a.drawImage(this.image,this.x,this.y,this.width,this.height),this.strokeStyle&&(a.strokeStyle=this.strokeStyle,a.strokeRect(this.x,this.y,this.width,this.height)),a.restore();}}

	class ToggleButton extends Button{constructor(a,b,c,d,e,f){super(a,b,c,d,null,null,e),this.image1=e,this.image2=f,this.toggled=!1;}toggle(a){this.toggled=!this.toggled,this.image=this.toggled?this.image2:this.image1,a.fillRect(this.x,this.y,this.width,this.height),this.draw(a);}onClick(a,b,c){let d=super.onClick(a,b,c);return d&&this.toggle(a),d}}

	function _defineProperty$1(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}const speed=10;class Bomb{constructor(a,b,c,d){this.x=a,this.y=b,this.dir=this.getDirection(c),this.map=d,this.image=new Image,this.image.src="images/bomb.png";}getDirection(a){return a===Player.Direction.South?{x:0,y:speed}:a===Player.Direction.SouthWest?{x:-10,y:speed}:a===Player.Direction.SouthEast?{x:speed,y:speed}:a===Player.Direction.West?{x:-10,y:0}:a===Player.Direction.East?{x:speed,y:0}:a===Player.Direction.North?{x:0,y:-10}:a===Player.Direction.NorthWest?{x:-10,y:-10}:a===Player.Direction.NorthEast?{x:speed,y:-10}:this.getDirection(Player.Direction.South)}move(a,b){this.x=a,this.y=b;}update(a){if(this.x+=this.dir.x*a,this.y+=this.dir.y*a,0>this.x||this.x+Bomb.size>this.map.width||0>this.y||this.y+Bomb.size>this.map.height)return !0;for(let b,c=0;c<this.map.blocks.length;c++)if(b=this.map.blocks[c],b.hitTest(this.x+1,this.y+1,Bomb.size-2,Bomb.size-2))return b.type===Block.Type.Soft&&this.map.blocks.splice(c,1),!0;return !1}draw(a){let b=this.x,c=this.y,d=Bomb.size,e=Bomb.size;if(this.image.width>this.image.height){let a=Bomb.size/this.image.width;d=Bomb.size,e=this.image.height*a,b=this.x,c=this.y+(Bomb.size-e)/2;}else if(this.image.width<this.image.height){let a=Bomb.size/this.image.height;e=Bomb.size,d=this.image.width*a,b=this.x+(Bomb.size-d)/2,c=this.y;}a.drawImage(this.image,b,c,d,e);}}_defineProperty$1(Bomb,"size",25);

	function _defineProperty$2(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}class Player{constructor(a,b,c,d){this.x=a,this.y=b,this.width=Player.size,this.height=Player.size,this.map=d,this.direction=Player.Direction.South,this.action=Player.Action.Closed,this.loadImages(c),this.lastBombCreatedTime=performance.now(),this.bombs=[];}loadImages(a){this.imageMap={},this.imageMap[Player.Direction.South]={},this.imageMap[Player.Direction.SouthWest]={},this.imageMap[Player.Direction.SouthEast]={},this.imageMap[Player.Direction.West]={},this.imageMap[Player.Direction.East]={},this.imageMap[Player.Direction.North]={},this.imageMap[Player.Direction.NorthWest]={},this.imageMap[Player.Direction.NorthEast]={},this.imageMap[Player.Direction.South][Player.Action.Open]=this.loadImage(`${a}-south-open.png`),this.imageMap[Player.Direction.South][Player.Action.Closed]=this.loadImage(`${a}-south-closed.png`),this.imageMap[Player.Direction.SouthWest][Player.Action.Open]=this.loadImage(`${a}-southwest-open.png`),this.imageMap[Player.Direction.SouthWest][Player.Action.Closed]=this.loadImage(`${a}-southwest-closed.png`),this.imageMap[Player.Direction.SouthEast][Player.Action.Open]=this.loadImage(`${a}-southeast-open.png`),this.imageMap[Player.Direction.SouthEast][Player.Action.Closed]=this.loadImage(`${a}-southeast-closed.png`),this.imageMap[Player.Direction.West][Player.Action.Open]=this.loadImage(`${a}-west-open.png`),this.imageMap[Player.Direction.West][Player.Action.Closed]=this.loadImage(`${a}-west-closed.png`),this.imageMap[Player.Direction.East][Player.Action.Open]=this.loadImage(`${a}-east-open.png`),this.imageMap[Player.Direction.East][Player.Action.Closed]=this.loadImage(`${a}-east-closed.png`),this.imageMap[Player.Direction.North][Player.Action.Open]=this.loadImage(`${a}-north.png`),this.imageMap[Player.Direction.North][Player.Action.Closed]=this.loadImage(`${a}-north.png`),this.imageMap[Player.Direction.NorthWest][Player.Action.Open]=this.loadImage(`${a}-northwest-open.png`),this.imageMap[Player.Direction.NorthWest][Player.Action.Closed]=this.loadImage(`${a}-northwest-closed.png`),this.imageMap[Player.Direction.NorthEast][Player.Action.Open]=this.loadImage(`${a}-northeast-open.png`),this.imageMap[Player.Direction.NorthEast][Player.Action.Closed]=this.loadImage(`${a}-northeast-closed.png`);}loadImage(a){let b=new Image;return b.src=a,b}setDirectionWithHeading(a,b){0<a&&0<b?this.direction=Player.Direction.SouthEast:0<a&&0>b?this.direction=Player.Direction.NorthEast:0<a&&0===b?this.direction=Player.Direction.East:0>a&&0<b?this.direction=Player.Direction.SouthWest:0>a&&0>b?this.direction=Player.Direction.NorthWest:0>a&&0===b?this.direction=Player.Direction.West:0===a&&0<b?this.direction=Player.Direction.South:0==a&&0>b&&(this.direction=Player.Direction.North);}isCombination(a,b,c,d){return a===c&&b===d||a===d&&b===c}setDirection(a,b){this.isCombination(a,b,Player.Direction.East,Player.Direction.North)?this.direction=Player.Direction.NorthEast:this.isCombination(a,b,Player.Direction.East,Player.Direction.West)?this.direction=a:this.isCombination(a,b,Player.Direction.East,Player.Direction.South)?this.direction=Player.Direction.SouthEast:this.isCombination(a,b,Player.Direction.North,Player.Direction.South)?this.direction=a:this.isCombination(a,b,Player.Direction.North,Player.Direction.West)?this.direction=Player.Direction.NorthWest:this.isCombination(a,b,Player.Direction.South,Player.Direction.West)?this.direction=Player.Direction.SouthWest:a&&(this.direction=a);}move(a,b,c){try{let d,e;if(0!==a&&(d=Math.max(0,Math.min(this.map.width-this.width,this.x+a))),0!==b&&(e=Math.max(0,Math.min(this.map.height-this.height,this.y+b))),0!==a||0!==b){const f=4;let g=!1,h=!1,i=null,j=null;for(let c of this.map.blocks)if(0!==a&&!g&&c.hitTest(d+f,this.y+f,this.width-8,this.height-8)&&(g=!0,i=c),0!==b&&!h&&c.hitTest(this.x+f,e+f,this.width-8,this.height-8)&&(h=!0,j=c),h&&g)break;if(c===Player.Direction.East||c===Player.Direction.West){if(i)if(0===b)this.y+this.height/2>i.y+i.height/2?this.move(0,Math.abs(a),c):this.move(0,-Math.abs(a),c);else if(j)return void this.move(a,0,c);}else if((c===Player.Direction.North||c===Player.Direction.South)&&j)if(0===a)this.x+this.width/2>j.x+j.width/2?this.move(Math.abs(b),0,c):this.move(-Math.abs(b),0,c);else if(i)return void this.move(0,b,c);0===a||g||(this.x=d),0===b||h||(this.y=e);}}finally{this.setDirectionWithHeading(a,b);}}fire(){if(300<performance.now()-this.lastBombCreatedTime){this.lastBombCreatedTime=performance.now();let a=this.x+(this.width-Bomb.size)/2,b=this.y+(this.height-Bomb.size)/2;(this.direction===Player.Direction.East||this.direction===Player.Direction.West)&&(a=this.x+this.width/2,b=this.y+this.height/2);let c=new Bomb(a,b,this.direction,this.map);this.bombs.push(c);}}updateBombs(a){let b=[];for(let c,d=this.bombs.length-1;0<=d;d--)c=this.bombs[d],c.update(a)&&b.push(d);for(let c of b)this.bombs.splice(c,1);}drawBombs(a){for(let b of this.bombs)b.draw(a);}drawOutline(a){a.save(),a.strokeStyle="#FF0000",a.strokeRect(this.x,this.y,this.width,this.height),a.restore();}draw(a){this.drawBombs(a);let b=this.imageMap[this.direction][this.action],c=this.x,d=this.y,e=this.width,f=this.height;if(b.width>b.height){let a=this.width/b.width;e=this.width,f=b.height*a,c=this.x,d=this.y+(this.height-f)/2;}else if(b.width<b.height){let a=this.height/b.height;f=this.height,e=b.width*a,c=this.x+(this.width-e)/2,d=this.y;}a.drawImage(b,c,d,e,f);}}_defineProperty$2(Player,"size",50);_defineProperty$2(Player,"Direction",{South:"s",SouthWest:"sw",SouthEast:"se",West:"w",East:"e",North:"n",NorthWest:"nw",NorthEast:"ne"});_defineProperty$2(Player,"Action",{Open:"o",Closed:"c"});

	const speed$1=4,intervalMs=8,ArrowUp="arrowup",ArrowDown="arrowdown",ArrowLeft="arrowleft",ArrowRight="arrowright";class Game{constructor(a){this.map=a,this.map.backgroundFillColor+="55",this.spawnLocations=this.availableSpawnLocations(),this.keys={movePriority:[],wasdPriority:[]};}demo(a){let b=this.spawnLocations[Math.round(Math.random()*(this.spawnLocations.length-1))];this.player=new Player(b.x,b.y,"images/player/black",this.map),this.end=!1,this.startGameLoop(a);}stop(a){this.completion=a,this.end=!0;}isCombination(a,b,c,d){return d?a===c&&b===d||a===d&&b===c:a===c||b===c}excludeEachOther(a,b){return this.isCombination(a,b,Player.Direction.North,Player.Direction.South)||this.isCombination(a,b,Player.Direction.East,Player.Direction.West)}updatePlayer(a,b){let c=0,d=0,e=this.keys.movePriority,f=this.mapKeyToPlayerDirection(e[e.length-1]),g=this.mapKeyToPlayerDirection(e[e.length-2]);this.excludeEachOther(f,g)&&(g=null);let h;h=g?speed$1/1.2*b:speed$1*b,this.isCombination(f,g,Player.Direction.North)&&(d=-h),this.isCombination(f,g,Player.Direction.South)&&(d=h),this.isCombination(f,g,Player.Direction.West)&&(c=-h),this.isCombination(f,g,Player.Direction.East)&&(c=h),a.player.move(c,d,this.mapKeyToPlayerDirection(e[e.length-1]));let i=this.keys.wasdPriority;a.player.setDirection(this.mapKeyToPlayerDirection(i[i.length-1]),this.mapKeyToPlayerDirection(i[i.length-2])),a.player.updateBombs(b),a.keys[" "]?(this.player.action=Player.Action.Open,a.player.fire()):this.player.action=Player.Action.Closed;}update(a,b){a.updatePlayer(a,b);}startGameLoop(a){let b=performance.now(),c=this;requestAnimationFrame(function d(e){let f=(e-b)/intervalMs;c.update(c,f),c.draw(a),b=e,c.end?c.completion&&c.completion():requestAnimationFrame(d);});}availableSpawnLocations(){let a=[];for(let b=0;b<this.map.height-Player.size;b+=this.map.cellSize)for(let c,d=0;d<this.map.width-Player.size;d+=this.map.cellSize){c=!1;for(let a of this.map.blocks)if(a.hitTest(d+1,b+1,Player.size-2,Player.size-2)){c=!0;break}c||a.push({x:d,y:b});}return a}mapKeyToPlayerDirection(a){switch(a){case"w":case ArrowUp:return Player.Direction.North;case"s":case ArrowDown:return Player.Direction.South;case"a":case ArrowLeft:return Player.Direction.West;case"d":case ArrowRight:return Player.Direction.East;}}arrowKey(a){return a===ArrowUp||a===ArrowDown||a===ArrowLeft||a===ArrowRight}wasdKey(a){return "w"===a||"a"===a||"s"===a||"d"===a}onKeyDown(a){let b=a.key.toLowerCase();this.keys[b]||(this.keys[b]=!0,this.arrowKey(b)&&this.keys.movePriority.push(b),this.wasdKey(b)&&this.keys.wasdPriority.push(b));}onKeyUp(a){let b=a.key.toLowerCase();if(this.keys[b]=!1,this.arrowKey(b)){let a=this.keys.movePriority.indexOf(b);this.keys.movePriority.splice(a,1);}if(this.wasdKey(b)){let a=this.keys.wasdPriority.indexOf(b);this.keys.wasdPriority.splice(a,1);}}draw(a){this.map.draw(a),a.save(),a.translate(this.map.x,this.map.y),this.player.draw(a),a.restore();}}

	const canvas=document.getElementById("canvas"),context=canvas.getContext("2d");context.fillStyle="#eeeeee",context.fillRect(0,0,canvas.width,canvas.height);let map=new Map(60,60,800,600);map.draw(context);let buttons=[];const images=[{type:Block.Type.Soft,src:"images/Brick.png"},{type:Block.Type.Hard,src:"images/hardBrick.png"}];let y=60,x=1;images.forEach(function(a){let b=new Image,c=new Button(x,y,Block.size,Block.size,null,null,b);buttons.push(c),c.onClickAction=function(){map.setState(MapState.Paint,new Block(0,0,b,a.type));},y+=Block.size+10,b.onload=function(){c.draw(context);},b.src=a.src;});const colors=["#ff0000","#008000","#000080","#000000","#888888","#eeeeee","#eeee00","#ee8000","#8B4513"];let col=0;for(let a of colors){x=0===col?1:1+ColorBlock.size+2;let b=new Button(x,y,ColorBlock.size,ColorBlock.size,a);buttons.push(b),b.onClickAction=function(){map.setState(MapState.Paint,new ColorBlock(0,0,a,Block.Type.Color));},b.draw(context),0===col?col=1:(y+=ColorBlock.size+1,col=0);}x=1,1==col&&(y+=ColorBlock.size+1),y+=5;let colorPickerButton=new Button(x,y,2*ColorBlock.size,ColorBlock.size,"#FFFFFF","#00000");buttons.push(colorPickerButton),colorPickerButton.draw(context),colorPickerButton.onClickAction=function(){let a=document.createElement("input");a.type="color",a.value=colorPickerButton.fillStyle,map.setState(MapState.Paint,new ColorBlock(0,0,colorPickerButton.fillStyle,Block.Type.Color)),a.addEventListener("input",function(a){let b=a.target.value;colorPickerButton.fillStyle=b,colorPickerButton.draw(context),map.setState(MapState.Paint,new ColorBlock(0,0,b,Block.Type.Color));}),a.click();};function addButton(a,b,c,d,e,f,g){let h,i=new Image;if(f){let e=new Image;e.src=f,h=new ToggleButton(a,b,c,d,i,e);}else h=new Button(a,b,c,d,null,null,i);return h.onClickAction=g,buttons.push(h),i.onload=function(){h.draw(context);},i.src=e,h}y=1,x=60,addButton(x,y,Block.size,Block.size,"images/save.png",null,function(){map.save();}),x+=Block.size+10,addButton(x,y,Block.size,Block.size,"images/upload.png",null,function(){map.open(context);}),x+=Block.size+10,addButton(x,y,Block.size,Block.size,"images/landscape.png",null,function(){map.saveImage();}),x+=Block.size+10;let moveButton=addButton(x,y,Block.size,Block.size,"images/move.png",null,function(){map.setState(MapState.Move);});x+=Block.size+10;let eraseButton=addButton(x,y,Block.size,Block.size,"images/eraser.png",null,function(){map.setState(MapState.Erase);});x+=Block.size+10;let eyeDropper=addButton(x,y,Block.size,Block.size,"images/color-picker.png",null,function(){map.setState(MapState.EyeDropper,function(a){colorPickerButton.fillStyle=a,colorPickerButton.draw(context);});});x+=Block.size+10;let game=null;function toggleGame(){null===game?(game=new Game(map.copy()),game.demo(context)):game.stop(function(){game=null,map.setState(MapState.None),map.draw(context);});}let playButton=addButton(x,y,Block.size,Block.size,"images/play.png","images/stop.png",toggleGame);function handleButtonsOnClick(a,b){for(let c of buttons)if(!(game&&c!==playButton)&&c.onClick(context,a,b))return !0;return !1}function updateButtonsMouseCursor(a,b){for(let c of buttons)if(c.hitTest(a,b))return canvas.style.cursor=game&&c!==playButton?"not-allowed":"pointer",!0;return !1}function updateMouseCursor(a,b){updateButtonsMouseCursor(a,b)||map.updateMouseCursor(canvas,a,b)||(canvas.style.cursor="default");}function handleShortcut(a){switch(a.key){case"Escape":return game?(toggleGame(),playButton.toggle(context)):(map.setState(MapState.None),map.draw(context)),!0;case"M":case"m":{if(game)break;return moveButton.onClickAction(),map.draw(context),!0}case"E":case"e":{if(game)break;return eraseButton.onClickAction(),map.draw(context),!0}case"D":case"d":{if(game)break;return eyeDropper.onClickAction(),map.draw(context),!0}case"P":case"p":return toggleGame(),playButton.toggle(context),!0;}return !1}canvas.onclick=function(a){let b=a.pageX-canvas.offsetLeft,c=a.pageY-canvas.offsetTop;handleButtonsOnClick(b,c)||map.onClick(context,b,c);},window.onmousedown=function(a){let b=a.pageX-canvas.offsetLeft,c=a.pageY-canvas.offsetTop;map.onMouseDown(context,b,c);},window.onmouseup=function(a){let b=a.pageX-canvas.offsetLeft,c=a.pageY-canvas.offsetTop;map.onMouseUp(context,b,c);},window.onmousemove=function(a){let b=a.pageX-canvas.offsetLeft,c=a.pageY-canvas.offsetTop;updateMouseCursor(b,c),game||map.onMouseMove(context,b,c);},window.onkeydown=function(a){!handleShortcut(a)&&game&&game.onKeyDown(a);},window.onkeyup=function(a){game&&game.onKeyUp(a);};

}());
