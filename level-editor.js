(function () {
	'use strict';

	function _defineProperty(a,b,c){if(b in a){Object.defineProperty(a,b,{value:c,enumerable:true,configurable:true,writable:true});}else {a[b]=c;}return a}class Block{constructor(a,b,c,d){this.x=a;this.y=b;this.width=Block.size;this.height=Block.size;this.image=c;this.type=d;}id(){if(!this._id){this._id=`${this.type}${new URL(this.image.src).pathname}`;}return this._id}hitTest(a,b,c,d){if(c&&d){let e=(a>this.x||a+c>this.x)&&(a<this.x+this.width||a+c<this.x+this.width);let f=(b>this.y||b+d>this.y)&&(b<this.y+this.height||b+d<this.y+this.height);return e&&f}else {return a>=this.x&&a<=this.x+this.width&&b>=this.y&&b<=this.y+this.height}}move(a,b){this.x=a;this.y=b;}copy(){let a=Object.create(this);return Object.assign(a,this)}draw(a){a.drawImage(this.image,this.x,this.y,this.width,this.height);}}_defineProperty(Block,"size",50);_defineProperty(Block,"Type",{Soft:"soft",Hard:"hard",Color:"color"});class ColorBlock extends Block{constructor(a,b,c){super(a,b);this.width=ColorBlock.size;this.height=ColorBlock.size;this.type=Block.Type.Color;this.fillStyle=c;}id(){if(!this._id){this._id=`${this.type}${this.fillStyle}`;}return this._id}draw(a){a.save();a.fillStyle=this.fillStyle;a.fillRect(this.x,this.y,this.width,this.height);a.restore();}}_defineProperty(ColorBlock,"size",25);

	const MapState={None:"none",Paint:"paint",Move:"move",Erase:"erase",EyeDropper:"EyeDropper"};class Map{constructor(a,b,c,d){this.x=a;this.y=b;this.width=c;this.height=d;this.borderStrokeStyle="#888888";this.borderLineWidth=2;this.backgroundFillColor="#ffffff";this.gridStrokeStyle="#888888";this.gridLineWidth=1;this.blocks=[];this.activeBlock=null;this.cellSize=25;this.state=MapState.None;this.mouseDown=false;}copy(){let a=Object.create(this);Object.assign(a,this);a.blocks=a.blocks.slice();return a}setState(a,b){if(a===MapState.Paint){this.activeBlock=b;}else {this.activeBlock=null;}if(a===MapState.EyeDropper){this.completion=b;}else {this.completion=null;}this.state=a;}openContent(a,b,c){const d=b.map;c.width=d.width;c.height=d.height;c.blocks=[];c.draw(a);d.blocks.forEach(function(b){let d;if(b.type===Block.Type.Color){d=new ColorBlock(b.x,b.y,b.color);a.save();a.translate(c.x,c.y);d.draw(a);a.restore();}else {let e=new Image;d=new Block(b.x,b.y,e,b.type);e.onload=function(){a.save();a.translate(c.x,c.y);d.draw(a);a.restore();};e.src=b.img;}c.blocks.push(d);});}open(a){var b=this;let c=document.createElement("input");c.type="file";c.onchange=function(c){const d=c.target.files;if(!d||d.length===0)return;let f=b;let g=new FileReader;g.onload=function(b){let c=b.target.result;const d=JSON.parse(c);f.openContent(a,d,f);};g.readAsText(d[0]);};c.click();}download(b,c,d){if(d&&d.charAt(0)!=="."){d=`.${d}`;}let e=prompt("Save as",`${c}${d}`);if(e==null){return}if(e===""){e=`${c}${d}`;}if(!e.endsWith(d)){e=`${e}${d}`;}let f=document.createElement("a");f.href=b;f.download=e;f.click();}save(){let a=[];this.blocks.forEach(function(b){let c={type:b.type,x:b.x,y:b.y,width:b.width,height:b.height};if(b.type===Block.Type.Color){c.color=b.fillStyle;}else {c.img=new URL(b.image.src).pathname;}a.push(c);});let b={version:"0.1",map:{width:this.width,height:this.height,blocks:a}};let c="data:application/octet-stream,"+encodeURIComponent(JSON.stringify(b));this.download(c,"BlockBreakerMap","json");}saveImage(){let a=this.width;let b=this.height;let c=0;let d=0;for(const e of this.blocks){if(e.x<a)a=e.x;if(e.y<b)b=e.y;if(e.x+e.width>c)c=e.x+e.width;if(e.y+e.height>d)d=e.y+e.height;}let e=c-a;let f=d-b;let g=document.createElement("canvas");g.width=e;g.height=f;let h=g.getContext("2d");h.save();h.translate(-a,-b);this.drawBlocks(h);h.restore();let i=g.toDataURL("image/png");this.download(i,"BlockBreakerImage","png");}outOfBounds(a,b){a-=this.x;b-=this.y;return !(a>=0&&a<=this.width&&b>=0&&b<=this.height)}updateMouseCursor(a,b,c){if(this.outOfBounds(b,c)){return false}switch(this.state){case MapState.Paint:{a.style.cursor="default";return true}case MapState.Move:{a.style.cursor="move";return true}case MapState.EyeDropper:case MapState.Erase:{a.style.cursor="crosshair";return true}}return false}cellForXY(a,b){let c=Math.floor(a/this.cellSize)*this.cellSize;let d=Math.floor(b/this.cellSize)*this.cellSize;c=Math.min(c,this.width-this.activeBlock.width);d=Math.min(d,this.height-this.activeBlock.height);return {x:c,y:d}}onClick(a,b,c){if(this.outOfBounds(b,c)){return}switch(this.state){case MapState.Paint:{this.addBlock(a,b,c);break}case MapState.Move:{this.moveBlock(a,b,c);break}case MapState.Erase:{this.eraseBlock(a,b,c);break}case MapState.EyeDropper:{this.eyeDropper(a,b,c);break}}}onMouseDown(a,b,c){if(this.outOfBounds(b,c)){return}this.mouseDown=true;}onMouseUp(a,b,c){this.mouseDown=false;}drawActiveBlock(a,b,c){if(!this.activeBlock)return;this.draw(a);a.save();a.translate(this.x,this.y);b-=this.x;c-=this.y;if(b>=0&&b<=this.width&&c>=0&&c<=this.height){const d=this.cellForXY(b,c);this.activeBlock.move(d.x,d.y);this.activeBlock.draw(a);}a.restore();}addBlock(a,b,c){if(this.outOfBounds(b,c)){return}if(!this.activeBlock)return;b-=this.x;c-=this.y;const d=this.cellForXY(b,c);let e=false;for(let f=0;f<this.blocks.length;f++){let a=this.blocks[f];if(a.x===d.x&&a.y===d.y){if(a.id()!==this.activeBlock.id()){this.blocks.splice(f,1,this.activeBlock.copy());}e=true;break}}if(!e){this.blocks.push(this.activeBlock.copy());}}eraseBlock(a,b,c){b-=this.x;c-=this.y;for(let d=0;d<this.blocks.length;d++){let e=this.blocks[d];if(e.hitTest(b,c)){this.blocks.splice(d,1);this.draw(a);break}}}eyeDropper(a,b,c){b-=this.x;c-=this.y;for(let d=0;d<this.blocks.length;d++){let a=this.blocks[d];if(a.hitTest(b,c)){if(this.completion&&a.type===Block.Type.Color)this.completion(a.fillStyle);this.setState(MapState.Paint,a.copy());break}}}moveBlock(a,b,c){if(this.activeBlock){this.addBlock(a,b,c);this.activeBlock=null;}else {b-=this.x;c-=this.y;for(let a=0;a<this.blocks.length;a++){let d=this.blocks[a];if(d.hitTest(b,c)){this.activeBlock=this.blocks.splice(a,1)[0];break}}}}onMouseMove(a,b,c){switch(this.state){case MapState.Paint:{this.drawActiveBlock(a,b,c);if(this.mouseDown){this.addBlock(a,b,c);}break}case MapState.Move:{this.drawActiveBlock(a,b,c);break}case MapState.Erase:{if(this.mouseDown){this.eraseBlock(a,b,c);}break}}}drawGrid(a){a.beginPath();a.strokeStyle=this.gridStrokeStyle;a.lineWidth=this.gridLineWidth;for(let b=0;b<this.width;b+=this.cellSize){a.moveTo(b,0);a.lineTo(b,this.height);}for(let b=0;b<this.height;b+=this.cellSize){a.moveTo(0,b);a.lineTo(this.width,b);}a.stroke();}drawGuideLines(a){a.beginPath();a.lineWidth=2;a.moveTo(this.width/2,0);a.lineTo(this.width/2,this.height);a.moveTo(0,this.height/2);a.lineTo(this.width,this.height/2);let b=this.width-this.height;if(b>0){a.moveTo(b/2,0);a.lineTo(b/2,this.height);a.moveTo(this.width-b/2,0);a.lineTo(this.width-b/2,this.height);}let c=Math.min(this.height,this.width);a.moveTo(b/2+c/4,0);a.lineTo(b/2+c/4,this.height);a.moveTo(0,c/4);a.lineTo(this.width,c/4);a.stroke();}drawBlocks(a){this.blocks.forEach(function(b){b.draw(a);});}draw(a){a.save();a.translate(this.x,this.y);a.fillStyle=this.backgroundFillColor;a.strokeStyle=this.borderStrokeStyle;a.lineWidth=this.borderLineWidth;a.beginPath();a.rect(0,0,this.width,this.height);a.fill();a.stroke();this.drawGrid(a);this.drawGuideLines(a);this.drawBlocks(a);a.restore();}}

	class Button{constructor(a,b,c,d,e,f,g){this.x=a;this.y=b;this.width=c;this.height=d;this.fillStyle=e;this.strokeStyle=f;this.image=g;}hitTest(a,b,c,d){if(c&&d){let e=(a>this.x||a+c>this.x)&&(a<this.x+this.width||a+c<this.x+this.width);let f=(b>this.y||b+d>this.y)&&(b<this.y+this.height||b+d<this.y+this.height);return e&&f}else {return a>=this.x&&a<=this.x+this.width&&b>=this.y&&b<=this.y+this.height}}onClick(a,b,c){if(this.hitTest(b,c)){this.onClickAction();return true}return false}draw(a){a.save();if(this.fillStyle){a.fillStyle=this.fillStyle;a.fillRect(this.x,this.y,this.width,this.height);}if(this.image){a.drawImage(this.image,this.x,this.y,this.width,this.height);}if(this.strokeStyle){a.strokeStyle=this.strokeStyle;a.strokeRect(this.x,this.y,this.width,this.height);}a.restore();}}

	class ToggleButton extends Button{constructor(a,b,c,d,e,f){super(a,b,c,d,null,null,e);this.image1=e;this.image2=f;this.toggled=false;}toggle(a){this.toggled=!this.toggled;if(this.toggled){this.image=this.image2;}else {this.image=this.image1;}a.fillRect(this.x,this.y,this.width,this.height);this.draw(a);}onClick(a,b,c){let d=super.onClick(a,b,c);if(d){this.toggle(a);}return d}}

	function _defineProperty$1(a,b,c){if(b in a){Object.defineProperty(a,b,{value:c,enumerable:true,configurable:true,writable:true});}else {a[b]=c;}return a}const speed=10;class Bomb{constructor(a,b,c,d){this.x=a;this.y=b;this.dir=this.getDirection(c);this.map=d;this.image=new Image;this.image.src="images/bomb.png";}getDirection(a){switch(a){case Player.Direction.South:{return {x:0,y:speed}}case Player.Direction.SouthWest:{return {x:-speed,y:speed}}case Player.Direction.SouthEast:{return {x:speed,y:speed}}case Player.Direction.West:{return {x:-speed,y:0}}case Player.Direction.East:{return {x:speed,y:0}}case Player.Direction.North:{return {x:0,y:-speed}}case Player.Direction.NorthWest:{return {x:-speed,y:-speed}}case Player.Direction.NorthEast:{return {x:speed,y:-speed}}default:{return this.getDirection(Player.Direction.South)}}}move(a,b){this.x=a;this.y=b;}update(a){this.x+=this.dir.x*a;this.y+=this.dir.y*a;if(this.x<0||this.x+Bomb.size>this.map.width||this.y<0||this.y+Bomb.size>this.map.height){return true}for(let b=0;b<this.map.blocks.length;b++){let a=this.map.blocks[b];if(a.hitTest(this.x+1,this.y+1,Bomb.size-2,Bomb.size-2)){if(a.type===Block.Type.Soft){this.map.blocks.splice(b,1);}return true}}return false}draw(a){let b=this.x,c=this.y,d=Bomb.size,e=Bomb.size;if(this.image.width>this.image.height){let a=Bomb.size/this.image.width;d=Bomb.size;e=this.image.height*a;b=this.x;c=this.y+(Bomb.size-e)/2;}else if(this.image.width<this.image.height){let a=Bomb.size/this.image.height;e=Bomb.size;d=this.image.width*a;b=this.x+(Bomb.size-d)/2;c=this.y;}a.drawImage(this.image,b,c,d,e);}}_defineProperty$1(Bomb,"size",25);

	function _defineProperty$2(a,b,c){if(b in a){Object.defineProperty(a,b,{value:c,enumerable:true,configurable:true,writable:true});}else {a[b]=c;}return a}class Player{constructor(a,b,c,d){this.x=a;this.y=b;this.width=Player.size;this.height=Player.size;this.map=d;this.direction=Player.Direction.South;this.action=Player.Action.Closed;this.loadImages(c);this.lastBombCreatedTime=performance.now();this.bombs=[];}loadImages(a){this.imageMap={};this.imageMap[Player.Direction.South]={};this.imageMap[Player.Direction.SouthWest]={};this.imageMap[Player.Direction.SouthEast]={};this.imageMap[Player.Direction.West]={};this.imageMap[Player.Direction.East]={};this.imageMap[Player.Direction.North]={};this.imageMap[Player.Direction.NorthWest]={};this.imageMap[Player.Direction.NorthEast]={};this.imageMap[Player.Direction.South][Player.Action.Open]=this.loadImage(`${a}-south-open.png`);this.imageMap[Player.Direction.South][Player.Action.Closed]=this.loadImage(`${a}-south-closed.png`);this.imageMap[Player.Direction.SouthWest][Player.Action.Open]=this.loadImage(`${a}-southwest-open.png`);this.imageMap[Player.Direction.SouthWest][Player.Action.Closed]=this.loadImage(`${a}-southwest-closed.png`);this.imageMap[Player.Direction.SouthEast][Player.Action.Open]=this.loadImage(`${a}-southeast-open.png`);this.imageMap[Player.Direction.SouthEast][Player.Action.Closed]=this.loadImage(`${a}-southeast-closed.png`);this.imageMap[Player.Direction.West][Player.Action.Open]=this.loadImage(`${a}-west-open.png`);this.imageMap[Player.Direction.West][Player.Action.Closed]=this.loadImage(`${a}-west-closed.png`);this.imageMap[Player.Direction.East][Player.Action.Open]=this.loadImage(`${a}-east-open.png`);this.imageMap[Player.Direction.East][Player.Action.Closed]=this.loadImage(`${a}-east-closed.png`);this.imageMap[Player.Direction.North][Player.Action.Open]=this.loadImage(`${a}-north.png`);this.imageMap[Player.Direction.North][Player.Action.Closed]=this.loadImage(`${a}-north.png`);this.imageMap[Player.Direction.NorthWest][Player.Action.Open]=this.loadImage(`${a}-northwest-open.png`);this.imageMap[Player.Direction.NorthWest][Player.Action.Closed]=this.loadImage(`${a}-northwest-closed.png`);this.imageMap[Player.Direction.NorthEast][Player.Action.Open]=this.loadImage(`${a}-northeast-open.png`);this.imageMap[Player.Direction.NorthEast][Player.Action.Closed]=this.loadImage(`${a}-northeast-closed.png`);}loadImage(a){let b=new Image;b.src=a;return b}setDirectionWithHeading(a,b){if(a>0&&b>0){this.direction=Player.Direction.SouthEast;}else if(a>0&&b<0){this.direction=Player.Direction.NorthEast;}else if(a>0&&b===0){this.direction=Player.Direction.East;}else if(a<0&&b>0){this.direction=Player.Direction.SouthWest;}else if(a<0&&b<0){this.direction=Player.Direction.NorthWest;}else if(a<0&&b===0){this.direction=Player.Direction.West;}else if(a===0&&b>0){this.direction=Player.Direction.South;}else if(a===0&&b<0){this.direction=Player.Direction.North;}}isCombination(a,b,c,d){return a===c&&b===d||a===d&&b===c}setDirection(a,b){if(this.isCombination(a,b,Player.Direction.East,Player.Direction.North)){this.direction=Player.Direction.NorthEast;}else if(this.isCombination(a,b,Player.Direction.East,Player.Direction.West)){this.direction=a;}else if(this.isCombination(a,b,Player.Direction.East,Player.Direction.South)){this.direction=Player.Direction.SouthEast;}else if(this.isCombination(a,b,Player.Direction.North,Player.Direction.South)){this.direction=a;}else if(this.isCombination(a,b,Player.Direction.North,Player.Direction.West)){this.direction=Player.Direction.NorthWest;}else if(this.isCombination(a,b,Player.Direction.South,Player.Direction.West)){this.direction=Player.Direction.SouthWest;}else if(a){this.direction=a;}}move(a,b,c){try{let d,e;if(a!==0){d=Math.max(0,Math.min(this.map.width-this.width,this.x+a));}if(b!==0){e=Math.max(0,Math.min(this.map.height-this.height,this.y+b));}if(a!==0||b!==0){const f=4;let g=false;let h=false;let i=null;let j=null;for(let c of this.map.blocks){if(a!==0&&!g&&c.hitTest(d+f,this.y+f,this.width-f*2,this.height-f*2)){g=true;i=c;}if(b!==0&&!h&&c.hitTest(this.x+f,e+f,this.width-f*2,this.height-f*2)){h=true;j=c;}if(h&&g)break}if(c===Player.Direction.East||c===Player.Direction.West){if(i){if(b!==0){if(j){this.move(a,0,c);return}}else if(this.y+this.height/2>i.y+i.height/2){this.move(0,Math.abs(a),c);}else {this.move(0,-Math.abs(a),c);}}}else if(c===Player.Direction.North||c===Player.Direction.South){if(j){if(a!==0){if(i){this.move(0,b,c);return}}else if(this.x+this.width/2>j.x+j.width/2){this.move(Math.abs(b),0,c);}else {this.move(-Math.abs(b),0,c);}}}if(a!==0&&!g){this.x=d;}if(b!==0&&!h){this.y=e;}}}finally{this.setDirectionWithHeading(a,b);}}fire(){if(performance.now()-this.lastBombCreatedTime>300){this.lastBombCreatedTime=performance.now();let a=this.x+(this.width-Bomb.size)/2,b=this.y+(this.height-Bomb.size)/2;if(this.direction===Player.Direction.East||this.direction===Player.Direction.West){a=this.x+this.width/2;b=this.y+this.height/2;}let c=new Bomb(a,b,this.direction,this.map);this.bombs.push(c);}}updateBombs(a){let b=[];for(let c=this.bombs.length-1;c>=0;c--){let d=this.bombs[c];if(d.update(a)){b.push(c);}}for(let c of b){this.bombs.splice(c,1);}}drawBombs(a){for(let b of this.bombs){b.draw(a);}}drawOutline(a){a.save();a.strokeStyle="#FF0000";a.strokeRect(this.x,this.y,this.width,this.height);a.restore();}draw(a){this.drawBombs(a);let b=this.imageMap[this.direction][this.action];let c=this.x,d=this.y,e=this.width,f=this.height;if(b.width>b.height){let a=this.width/b.width;e=this.width;f=b.height*a;c=this.x;d=this.y+(this.height-f)/2;}else if(b.width<b.height){let a=this.height/b.height;f=this.height;e=b.width*a;c=this.x+(this.width-e)/2;d=this.y;}a.drawImage(b,c,d,e,f);}}_defineProperty$2(Player,"size",50);_defineProperty$2(Player,"Direction",{South:"s",SouthWest:"sw",SouthEast:"se",West:"w",East:"e",North:"n",NorthWest:"nw",NorthEast:"ne"});_defineProperty$2(Player,"Action",{Open:"o",Closed:"c"});

	const speed$1=4;const intervalMs=8;const ArrowUp="arrowup";const ArrowDown="arrowdown";const ArrowLeft="arrowleft";const ArrowRight="arrowright";class Game{constructor(a){this.map=a;this.map.backgroundFillColor=this.map.backgroundFillColor+"55";this.spawnLocations=this.availableSpawnLocations();this.keys={movePriority:[],wasdPriority:[]};}demo(a){let b=this.spawnLocations[Math.round(Math.random()*(this.spawnLocations.length-1))];this.player=new Player(b.x,b.y,"images/player/black",this.map);this.end=false;this.startGameLoop(a);}stop(a){this.completion=a;this.end=true;}isCombination(a,b,c,d){if(d){return a===c&&b===d||a===d&&b===c}else {return a===c||b===c}}excludeEachOther(a,b){return this.isCombination(a,b,Player.Direction.North,Player.Direction.South)||this.isCombination(a,b,Player.Direction.East,Player.Direction.West)}updatePlayer(a,b){const c=speed$1*b;let d=0,e=0;let f=this.keys.movePriority;let g=this.mapKeyToPlayerDirection(f[f.length-1]);let h=this.mapKeyToPlayerDirection(f[f.length-2]);if(this.excludeEachOther(g,h)){h=null;}if(this.isCombination(g,h,Player.Direction.North)){e=-c;}if(this.isCombination(g,h,Player.Direction.South)){e=c;}if(this.isCombination(g,h,Player.Direction.West)){d=-c;}if(this.isCombination(g,h,Player.Direction.East)){d=c;}a.player.move(d,e,this.mapKeyToPlayerDirection(f[f.length-1]));let i=this.keys.wasdPriority;a.player.setDirection(this.mapKeyToPlayerDirection(i[i.length-1]),this.mapKeyToPlayerDirection(i[i.length-2]));a.player.updateBombs(b);if(a.keys[" "]){this.player.action=Player.Action.Open;a.player.fire();}else {this.player.action=Player.Action.Closed;}}update(a,b){a.updatePlayer(a,b);}startGameLoop(a){let b=performance.now();let c=this;requestAnimationFrame(function d(e){let f=(e-b)/intervalMs;c.update(c,f);c.draw(a);b=e;if(c.end){if(c.completion)c.completion();}else {requestAnimationFrame(d);}});}availableSpawnLocations(){let a=[];for(let b=0;b<this.map.height-Player.size;b+=this.map.cellSize){for(let c=0;c<this.map.width-Player.size;c+=this.map.cellSize){let d=false;for(let a of this.map.blocks){if(a.hitTest(c+1,b+1,Player.size-2,Player.size-2)){d=true;break}}if(!d){a.push({x:c,y:b});}}}return a}mapKeyToPlayerDirection(a){switch(a){case"w":case ArrowUp:{return Player.Direction.North}case"s":case ArrowDown:{return Player.Direction.South}case"a":case ArrowLeft:{return Player.Direction.West}case"d":case ArrowRight:{return Player.Direction.East}}}arrowKey(a){return a===ArrowUp||a===ArrowDown||a===ArrowLeft||a===ArrowRight}wasdKey(a){return a==="w"||a==="a"||a==="s"||a==="d"}onKeyDown(a){let b=a.key.toLowerCase();if(!this.keys[b]){this.keys[b]=true;if(this.arrowKey(b)){this.keys.movePriority.push(b);}if(this.wasdKey(b)){this.keys.wasdPriority.push(b);}}}onKeyUp(a){let b=a.key.toLowerCase();this.keys[b]=false;if(this.arrowKey(b)){let a=this.keys.movePriority.indexOf(b);this.keys.movePriority.splice(a,1);}if(this.wasdKey(b)){let a=this.keys.wasdPriority.indexOf(b);this.keys.wasdPriority.splice(a,1);}}draw(a){this.map.draw(a);a.save();a.translate(this.map.x,this.map.y);this.player.draw(a);a.restore();}}

	const canvas=document.getElementById("canvas");const context=canvas.getContext("2d");context.fillStyle="#eeeeee";context.fillRect(0,0,canvas.width,canvas.height);let map=new Map(60,60,800,600);map.draw(context);let buttons=[];const images=[{type:Block.Type.Soft,src:"images/Brick.png"},{type:Block.Type.Hard,src:"images/hardBrick.png"}];let y=60;let x=1;images.forEach(function(a){let b=new Image;let c=new Button(x,y,Block.size,Block.size,null,null,b);buttons.push(c);c.onClickAction=function(){map.setState(MapState.Paint,new Block(0,0,b,a.type));};y+=Block.size+10;b.onload=function(){c.draw(context);};b.src=a.src;});const colors=["#ff0000","#008000","#000080","#000000","#888888","#eeeeee","#eeee00","#ee8000","#8B4513"];let col=0;for(let a of colors){x=col===0?1:1+ColorBlock.size+2;let b=new Button(x,y,ColorBlock.size,ColorBlock.size,a);buttons.push(b);b.onClickAction=function(){map.setState(MapState.Paint,new ColorBlock(0,0,a,Block.Type.Color));};b.draw(context);if(col===0){col=1;}else {y+=ColorBlock.size+1;col=0;}}x=1;if(col===1){y+=ColorBlock.size+1;}y+=5;let colorPickerButton=new Button(x,y,ColorBlock.size*2,ColorBlock.size,"#FFFFFF","#00000");buttons.push(colorPickerButton);colorPickerButton.draw(context);colorPickerButton.onClickAction=function(){let a=document.createElement("input");a.type="color";a.value=colorPickerButton.fillStyle;map.setState(MapState.Paint,new ColorBlock(0,0,colorPickerButton.fillStyle,Block.Type.Color));a.addEventListener("input",function(a){let b=a.target.value;colorPickerButton.fillStyle=b;colorPickerButton.draw(context);map.setState(MapState.Paint,new ColorBlock(0,0,b,Block.Type.Color));});a.click();};function addButton(a,b,c,d,e,f,g){let h=new Image;let i;if(f){let e=new Image;e.src=f;i=new ToggleButton(a,b,c,d,h,e);}else {i=new Button(a,b,c,d,null,null,h);}i.onClickAction=g;buttons.push(i);h.onload=function(){i.draw(context);};h.src=e;return i}y=1;x=60;addButton(x,y,Block.size,Block.size,"images/save.png",null,function(){map.save();});x+=Block.size+10;addButton(x,y,Block.size,Block.size,"images/upload.png",null,function(){map.open(context);});x+=Block.size+10;addButton(x,y,Block.size,Block.size,"images/landscape.png",null,function(){map.saveImage();});x+=Block.size+10;let moveButton=addButton(x,y,Block.size,Block.size,"images/move.png",null,function(){map.setState(MapState.Move);});x+=Block.size+10;let eraseButton=addButton(x,y,Block.size,Block.size,"images/eraser.png",null,function(){map.setState(MapState.Erase);});x+=Block.size+10;let eyeDropper=addButton(x,y,Block.size,Block.size,"images/color-picker.png",null,function(){map.setState(MapState.EyeDropper,function(a){colorPickerButton.fillStyle=a;colorPickerButton.draw(context);});});x+=Block.size+10;let game=null;function toggleGame(){if(game===null){game=new Game(map.copy());game.demo(context);}else {game.stop(function(){game=null;map.setState(MapState.None);map.draw(context);});}}let playButton=addButton(x,y,Block.size,Block.size,"images/play.png","images/stop.png",toggleGame);function handleButtonsOnClick(a,b){for(let c of buttons){if(game&&c!==playButton){continue}if(c.onClick(context,a,b)){return true}}return false}function updateButtonsMouseCursor(a,b){for(let c of buttons){if(c.hitTest(a,b)){if(game&&c!==playButton){canvas.style.cursor="not-allowed";}else {canvas.style.cursor="pointer";}return true}}return false}function updateMouseCursor(a,b){if(updateButtonsMouseCursor(a,b)){return}if(map.updateMouseCursor(canvas,a,b)){return}canvas.style.cursor="default";}function handleShortcut(a){switch(a.key){case"Escape":{if(game){toggleGame();playButton.toggle(context);}else {map.setState(MapState.None);map.draw(context);}return true}case"M":case"m":{if(game)break;moveButton.onClickAction();map.draw(context);return true}case"E":case"e":{if(game)break;eraseButton.onClickAction();map.draw(context);return true}case"D":case"d":{if(game)break;eyeDropper.onClickAction();map.draw(context);return true}case"P":case"p":{toggleGame();playButton.toggle(context);return true}}return false}canvas.onclick=function(a){let b=a.pageX-canvas.offsetLeft;let c=a.pageY-canvas.offsetTop;if(handleButtonsOnClick(b,c)){return}map.onClick(context,b,c);};window.onmousedown=function(a){let b=a.pageX-canvas.offsetLeft;let c=a.pageY-canvas.offsetTop;map.onMouseDown(context,b,c);};window.onmouseup=function(a){let b=a.pageX-canvas.offsetLeft;let c=a.pageY-canvas.offsetTop;map.onMouseUp(context,b,c);};window.onmousemove=function(a){let b=a.pageX-canvas.offsetLeft;let c=a.pageY-canvas.offsetTop;updateMouseCursor(b,c);if(!game){map.onMouseMove(context,b,c);}};window.onkeydown=function(a){if(!handleShortcut(a)){if(game){game.onKeyDown(a);}}};window.onkeyup=function(a){if(game){game.onKeyUp(a);}};

}());
